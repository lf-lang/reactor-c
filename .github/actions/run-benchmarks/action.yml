name: Run benchmarks
description: Run benchmarks and collect results

inputs:
  scheduler:
    type: string  # A comma-separated list (no spaces!) is allowed.
    required: true
  runtime-ref:
    type: string
    required: true
  target:
    type: string
  num-workers:
    type: string  # Provide a comma-separated list without spaces.
    description: The number of workers to be used by the scheduler.
    required: true
  iterations:
    type: number
    description: The number of iterations with which to run each benchmark.
    required: false
    default: 12
  repo-for-saving-data:
    description: |
      The directory name of the repository where graphs and CSVs from benchmarks should be saved.
    type: string
    default: benchmarks-lingua-franca
  errors-file:
    description: |
      The file in which to write any error messages.
    type: string
    default: errors.txt


outputs:
  output-file:
    description: "The CSV file summarizing all benchmark results"
    value: ${{ steps.compute-output-file.outputs.output-file }}


runs:
  using: "composite"
  steps:
    - name: Check out requested branches
      id: check-out
      run: |
        echo $(ls)
        echo "Checking out ${{ inputs.runtime-ref }}"
        SUBMODULE_DIR=org.lflang/src/lib/${{ inputs.target }}/reactor-${{ inputs.target }}
        cd lf/$SUBMODULE_DIR && \
            git checkout ${{ inputs.runtime-ref }} && cd ../../../../..
        git checkout $(cat $SUBMODULE_DIR/lingua-franca-ref.txt)
        echo "::set-output name=submodule-dir::$SUBMODULE_DIR"
        cd ..
      shell: bash

    - name: Compute output file
      id: compute-output-file
      run: |
        SHA=$(cd lf/${{ steps.check-out.outputs.submodule-dir }} && \
          git rev-parse --short=7 HEAD && cd ../../../../../..)
        OUTPUT_DIR=csvs/$(date -I)
        mkdir -p ${{ inputs.repo-for-saving-data }}/csvs
        OUTPUT_FILENAME=${{ inputs.scheduler }}-${{ inputs.num-workers }}-${{ inputs.runtime-ref }}-${SHA:0:7}.csv
        cd ${{ inputs.repo-for-saving-data }}
        EXISTING_FILE=$(find ./csvs -name $OUTPUT_FILENAME | head -n 1)
        cd ..
        if [[ -z $EXISTING_FILE ]]; then
          mkdir -p ${{ inputs.repo-for-saving-data }}/$OUTPUT_DIR
          echo "The collected benchmark results will be saved to $OUTPUT_DIR/$OUTPUT_FILENAME."
          echo "::set-output name=output-file::$OUTPUT_DIR/$OUTPUT_FILENAME"
        else
          echo "The benchmark will not be run because results for that commit are already saved at $EXISTING_FILE."
          echo "::set-output name=file-already-exists::true"
          echo "::set-output name=output-file::$EXISTING_FILE"
        fi
      shell: bash

    - name: Update LFC
      run: |
        cd lf
        ./gradlew buildLfc
        cd ..
      shell: bash
      if: ${{ ! steps.compute-output-file.outputs.file-already-exists }}

    - name: Run benchmarks
      run: |
        # Allow at most 1 second per iteration. This will result in timeouts on runtime versions
        # that are an order of magnitude slower than the unthreaded C runtime.
        ./runner/run_benchmark.py -m \
          continue_on_error=True \
          timeout=${{ inputs.iterations }} \
          iterations=${{ inputs.iterations }} \
          benchmark="glob(*)" \
          target=lf-${{ inputs.target }} \
          size=fast \
          ++target.params.scheduler=${{ inputs.scheduler }} \
          ++stacktrace=True \
          threads=${{ inputs.num-workers }} \
          | tee >(grep "\[ERROR\]" >> ${{ inputs.errors-file }})
        echo "::set-output name=output-file::$EXISTING_FILE"
      shell: bash
      if: ${{ ! steps.compute-output-file.outputs.file-already-exists }}

    - name: Collect benchmark results
      id: collect-results
      run: |
        ./runner/collect_results.py latest ${{ inputs.repo-for-saving-data }}/${{ steps.compute-output-file.outputs.output-file }}
      shell: bash
      if: ${{ ! steps.compute-output-file.outputs.file-already-exists }}
